Pergunta;Resposta;Assunto
O que é proprietário do recurso?;Usuário ou sistema que possui os recursos protegidos e pode conceder acesso a eles.;OAuth2.0.
O que é o cliente?;É o sistema que requer acesso aos recursos protegidos. Para acessar recursos, o Cliente deve ter o token de acesso apropriado.;OAuth2.0.
O que é Servidor de Autorização?;este servidor recebe solicitações do Cliente para tokens de acesso e os emite mediante autenticação e consentimento bem-sucedidos do proprietário do recurso. O servidor de autorização expõe dois endpoints: o endpoint de Autorização, que lida com a autenticação e o consentimento interativos do usuário, e o endpoint de Token, que está envolvido em uma interação máquina a máquina.;OAuth2.0.
O que é servidor de recursos?;É um servidor que protege os recursos do usuário e recebe solicitações de acesso do Cliente. Ele aceita e valida um token de acesso do cliente e retorna os recursos apropriados para ele.;OAuth2.0.
Como funciona os tokens de acesso e código de autorização?;O servidor de autorização OAuth 2 não pode retornar diretamente um token de acesso após o proprietário do recurso ter autorizado o acesso. Em vez disso, e para melhor segurança, um código de autorização pode ser retornado, que é trocado por um token de acesso. Além disso, o servidor de autorização também pode emitir um token de atualização com o token de acesso. Ao contrário dos tokens de acesso, os tokens de atualização normalmente têm validade longa e podem ser trocados por novos tokens de acesso após a expiração. Como os tokens de atualização têm essas propriedades, eles devem ser armazenados com segurança pelos clientes.;OAuth2.0.
Como o OAuth 2.0 funciona?;O Cliente solicita autorização do servidor de Autorização, fornecendo a ID e o segredo do cliente como identificação;OAuth2.0.
Como é realizado a Concessão de código de autorização?;O servidor de autorização retorna um código de autorização de uso único para o cliente, que é trocado por um token de acesso. Esta é a melhor opção para aplicativos da web tradicionais onde a troca pode acontecer com segurança no lado do servidor. O fluxo do código de autorização pode ser usado por aplicativos de página única (SPA) e aplicativos móveis/nativos. No entanto, aqui, o client secret não pode ser armazenado de forma segura e, portanto, a autenticação, durante a troca, é limitada ao uso da id do cliente sozinha. Uma alternativa melhor é a concessão de código de autorização com PKCE.;OAuth2.0.
Como é realizado a Concessão Concessão implícita?;Um fluxo simplificado onde o token de acesso é devolvido diretamente para o Cliente. No fluxo implícito, o servidor de autorização pode retornar o token de acesso como um parâmetro no URI de retorno de chamada ou como uma resposta a uma publicação de formulário. A primeira opção agora está obsoleta devido a um possível vazamento de token.;OAuth2.0.
Como é realizado a Concessão de código de autorização com chave de prova para troca de código (PKCE)?;Esse fluxo de autorização é semelhante à concessão de código de autorização, mas com etapas adicionais que o tornam mais seguro para aplicativos e SPAs móveis/nativos.;OAuth2.0.
Como é realizado o Tipo de concessão de credenciais do proprietário de recursos?;Essa concessão requer que o Cliente primeiro adquira as credenciais do proprietário do recurso, que são passadas para o servidor de Autorização. É, portanto, limitado a Clientes que são completamente confiáveis. Ele tem a vantagem de não envolver nenhum redirecionamento para o servidor de autorização;OAuth2.0.
Como é realizado o Tipo de concessão de credenciais do cliente?;Usado para aplicações não interativas, como processos automatizados, microsserviços, etc. Neste caso, o aplicativo é autenticado por si mesmo, usando a ID e o client secret.;OAuth2.0.
Como é realizado o Fluxo de autorização do dispositivo?;Uma concessão que permite o uso por aplicativos em dispositivos com restrição de entrada, como TVs inteligentes.;OAuth2.0.
Como é realizado a Concessão de tokens de atualização?;O fluxo que envolve a troca de um token de atualização por um novo token de acesso.;OAuth2.0.
O que é JWT?;Padrão para autenticação e troca de informações. Nele é possível armazenar de forma segura e compacta objetos JSON. Este token é um código Base64 e pode ser assinado usando um segredo ou par de chaves privadas/públicas. Tokens assinados podem verificar a integridade das informações contidas neles, diferente de tokens criptografados que ocultam essas informações. Se um JWT é assinado por um par de chaves pública/privada, a assinatura certifica que a parte que possui a chave privada é quem de fato assinou.;JWT
Quando e onde eu posso usar?;Em um cenário de autorização. Depois que o usuário estiver conectado, é possível observar cada solicitação e verificar se esta inclui o JWT, permitindo que o usuário acesse rotas, serviços e outros recursos. Outro cenário de utilização de JWTs são as trocas de informações pois, como eles são assinados, é possível ter certeza de que os remetentes são quem dizem ser quem são. Além disso, podemos identificar se o conteúdo da assinatura foi alterado ou não devido à composição de um JWT.;JWT
O que é o header?;Header é o cabeçalho do token onde passamos basicamente duas informações: o alg que informa qual algoritmo é usado para criar a assinatura e o typ que indica qual o tipo de token.;JWT
O que é o Payload?;É onde os dados são armazenados. Pode conter informações como o identificador do usuário, permissões, expiração do token, etc. Usar senhas no payload do JWT é inseguro, pois os JWTs são frequentemente decodificados e lidos por clientes. Os JWTs são assinados, mas não criptografados, permitindo acesso não autorizado a informações sensíveis.;JWT
O que é Signature?;A assinatura do token é composta pela codificação do header e do payload somada a uma chave secreta e é gerada pelo algoritmo especificado no cabeçalho.;JWT
O que é e por que ele é importante?;Open Worldwide Application Security Project é uma comunidade aberta dedicada a permitir que organizações projetem, desenvolvam e adquiram  software para aplicativos seguros e confiáveis. Seus programas incluem projetos de software de código aberto liderados pela comunidade e conferências locais e globais. Desempenha um papel crucial na conscientização sobre os riscos de segurança de aplicativos web e fornece ferramentas, documentação e melhores práticas para enfrentar os desafios de segurança de aplicativos web.;OWASP Top 10.
Explique sobre Ataques de injeção.;Invasores inserem dados hostis em linguagens de comando ou consulta, ou quando dados fornecidos pelo usuário não são validados, levando à execução não intencional de comandos maliciosos. Esta categoria de risco abrange ataques NoSQL, comando do sistema operacional, LDAP e injeção de SQL, e também inclui Cross-Site Scripting (XSS) , no qual os invasores injetam scripts maliciosos do lado do cliente, como JavaScript, em páginas da web visualizadas por outros usuários. Isso pode resultar no roubo de informações confidenciais, como credenciais de login, dados pessoais ou cookies de sessão. Um WAF pode ajudar a detectar e bloquear tentativas de injeção de código malicioso inspecionando e filtrando solicitações de entrada.;OWASP Top 10.
Explique sobre Componentes vulneráveis e desatualizados.;O uso de componentes desatualizados/vulneráveis como sistema operacional (SO), servidor web/de aplicativos, sistema de gerenciamento de banco de dados (SGBD), aplicativos, APIs, ambientes de execução, bibliotecas e plug-ins, pode expor aplicativos a falhas de segurança conhecidas, aumentando o risco de exploração. Se a organização não tem medidas para corrigir a plataforma e as dependências subjacentes de um sistema, o sistema fica exposto a dias ou semanas. Cadeias de fornecimento de software complexas e automação por meio de pipelines de CI/CD aumentam o risco de introdução de software vulnerável na pilha de TI. Um WAF pode servir como uma solução paliativa essencial para proteger contra exploração de vulnerabilidades.;OWASP Top 10.
Explique sobre Configurações incorretas de segurança.;A falta de reforço de segurança em estruturas de aplicativos web, plataformas, servidores ou controles de segurança pode levar ao acesso não autorizado, à exposição de informações confidenciais ou a outras vulnerabilidades de segurança. Riscos devido a configurações incorretas de segurança também podem resultar de permissões configuradas incorretamente em serviços de nuvem ou da instalação ou ativação de recursos desnecessários, como portas, serviços, contas ou privilégios não utilizados. A configuração incorreta de aplicativos da Web e APIs é um risco significativo porque os principais provedores de nuvem têm diferentes posturas de segurança padrão e a arquitetura está se tornando cada vez mais descentralizada e distribuída em uma estrutura de várias nuvens. ;OWASP Top 10.
Explique sobre Controles de acesso quebrados.;Ocorre quando a aplicação, insuficiente de controles de acesso e autorização, permite que invasores acessem funcionalidades ou dados não autorizados. Isso pode ocorrer devido a referências diretas a objetos (IDORs) inseguras, que podem surgir quando um aplicativo falha ao validar a entrada do usuário usada como referência direta a um objeto interno. Isso também pode ocorrer devido à ausência de controles de acesso em nível de função, quando o aplicativo valida apenas os controles de acesso no estágio inicial de autenticação ou autorização, mas não aplica esses controles de forma consistente em todas as funções ou operações do aplicativo. Um firewall de aplicativo da Web (WAF) pode ajudar a proteger contra esses ataques monitorando e aplicando controles de acesso para impedir o acesso não autorizado a objetos ou recursos confidenciais.;OWASP Top 10.
Explique sobre Design inseguro.;Representa diferentes fraquezas, expressas como controles de segurança ausentes ou ineficazes e falhas arquitetônicas que ocorrem quando um aplicativo é projetado para depender de processos inseguros ou quando os controles de segurança necessários para defesa contra ataques não são implementados. Esses riscos podem ser reduzidos por meio do uso crescente de modelagem de ameaças, padrões de design seguros e arquiteturas de referência.;OWASP Top 10.
Explique sobre Falhas criptográficas.;Ocorre devido à proteção inadequada de dados confidenciais durante o trânsito e em repouso. Falhas criptográficas podem levar a violações de dados, acesso não autorizado a informações confidenciais e não conformidade com regulamentações de privacidade de dados e padrões financeiros. Essas falhas podem resultar de armazenamento criptográfico inseguro, armazenamento de dados em texto simples, gerenciamento de chaves inseguro e vazamento de informações, que pode ter origem na geração de chaves fracas, números aleatórios ou em falhas em protocolos criptográficos.;OWASP Top 10.
